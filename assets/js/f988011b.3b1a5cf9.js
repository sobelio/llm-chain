"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7393],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>g});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},m=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=s(r),d=a,g=u["".concat(p,".").concat(d)]||u[d]||c[d]||o;return r?n.createElement(g,i(i({ref:t},m),{},{components:r})):n.createElement(g,i({ref:t},m))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2799:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const o={},i="Using Prompt Templates and Parameters",l={unversionedId:"getting-started-tutorial/using-prompt-templates-and-parameters",id:"getting-started-tutorial/using-prompt-templates-and-parameters",title:"Using Prompt Templates and Parameters",description:"Having problems? Don't worry, reach out on discord and we will help you out.",source:"@site/docs/getting-started-tutorial/03-using-prompt-templates-and-parameters.md",sourceDirName:"getting-started-tutorial",slug:"/getting-started-tutorial/using-prompt-templates-and-parameters",permalink:"/docs/getting-started-tutorial/using-prompt-templates-and-parameters",draft:!1,editUrl:"https://github.com/sobelio/llm-chain/tree/main/docs/docs/getting-started-tutorial/03-using-prompt-templates-and-parameters.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"sidebar",previous:{title:"Generating Your First LLM Output",permalink:"/docs/getting-started-tutorial/generating-your-first-llm-output"},next:{title:"Creating Your First Sequential Chain",permalink:"/docs/getting-started-tutorial/building-a-multi-step-chain"}},p={},s=[],m={toc:s},u="wrapper";function c(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"using-prompt-templates-and-parameters"},"Using Prompt Templates and Parameters"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Having problems? Don't worry, reach out on ",(0,a.kt)("a",{parentName:"p",href:"https://discord.gg/kewN9Gtjt2"},"discord")," and we will help you out.")),(0,a.kt)("p",null,"In this part of the tutorial series, we'll explore how to use prompt templates and parameters with llm-chain. Prompt templates allow you to create dynamic prompts, and parameters are the text strings you put into your templates."),(0,a.kt)("p",null,"Here's a simple Rust program demonstrating how to use prompt templates and parameters:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'use llm_chain::{executor, parameters, prompt, step::Step};\n\n#[tokio::main(flavor = "current_thread")]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Create a new ChatGPT executor\n    let exec = executor!()?;\n    // Create our step containing our prompt template\n    let step = Step::for_prompt_template(prompt!(\n        "You are a bot for making personalized greetings",\n        "Make a personalized greeting tweet for {{text}}" // Text is the default parameter name, but you can use whatever you want\n    ));\n\n    // A greeting for emil!\n    let res = step.run(&parameters!("Emil"), &exec).await?;\n    println!("{}", res);\n\n    // A greeting for you\n    let res = step.run(&parameters!("Your Name Here"), &exec).await?;\n\n    println!("{}", res.to_immediate().await?.as_content());\n\n    Ok(())\n}\n\n')),(0,a.kt)("p",null,"Let's break down the different parts of the code:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"We start with importing the necessary libraries, including the traits and structs required for our program."),(0,a.kt)("li",{parentName:"ol"},"The main async function is defined, using Tokio as the runtime."),(0,a.kt)("li",{parentName:"ol"},"We create a new ",(0,a.kt)("inlineCode",{parentName:"li"},"Executor")," with the default settings."),(0,a.kt)("li",{parentName:"ol"},"A ",(0,a.kt)("inlineCode",{parentName:"li"},"Step")," is created containing our prompt template with a placeholder (",(0,a.kt)("inlineCode",{parentName:"li"},"{{text}}"),") that will be replaced with a specific value later."),(0,a.kt)("li",{parentName:"ol"},"We create a ",(0,a.kt)("inlineCode",{parentName:"li"},"Parameters"),' object with the value "Emil" to replace the placeholder in the prompt template.'),(0,a.kt)("li",{parentName:"ol"},"We execute the ",(0,a.kt)("inlineCode",{parentName:"li"},"Step")," with the provided ",(0,a.kt)("inlineCode",{parentName:"li"},"parameters")," and store the result in ",(0,a.kt)("inlineCode",{parentName:"li"},"res"),", then print the response to the console."),(0,a.kt)("li",{parentName:"ol"},"We create another ",(0,a.kt)("inlineCode",{parentName:"li"},"Parameters"),' object, this time with the value "Your Name Here" to replace the placeholder.'),(0,a.kt)("li",{parentName:"ol"},"We execute the ",(0,a.kt)("inlineCode",{parentName:"li"},"Step")," again with the new ",(0,a.kt)("inlineCode",{parentName:"li"},"parameters"),", store the result in ",(0,a.kt)("inlineCode",{parentName:"li"},"res"),", and print the response to the console.")),(0,a.kt)("p",null,"In the next tutorial, we will combine multiple LLM invocations to solve more complicated problems."))}c.isMDXComponent=!0}}]);