"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2978],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(n),d=a,g=c["".concat(l,".").concat(d)]||c[d]||m[d]||o;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8077:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const o={},i="Generating Your First LLM Output",s={unversionedId:"getting-started-tutorial/generating-your-first-llm-output",id:"getting-started-tutorial/generating-your-first-llm-output",title:"Generating Your First LLM Output",description:"Having problems? Don't worry, reach out on discord and we will help you out.",source:"@site/docs/getting-started-tutorial/02-generating-your-first-llm-output.md",sourceDirName:"getting-started-tutorial",slug:"/getting-started-tutorial/generating-your-first-llm-output",permalink:"/docs/getting-started-tutorial/generating-your-first-llm-output",draft:!1,editUrl:"https://github.com/sobelio/llm-chain/tree/main/docs/docs/getting-started-tutorial/02-generating-your-first-llm-output.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"sidebar",previous:{title:"Setting up a project with llm-chain",permalink:"/docs/getting-started-tutorial/setting-up-a-project"},next:{title:"Using Prompt Templates and Parameters",permalink:"/docs/getting-started-tutorial/using-prompt-templates-and-parameters"}},l={},u=[{value:"Understanding LLM Response",id:"understanding-llm-response",level:2},{value:"Error Handling and Common Issues",id:"error-handling-and-common-issues",level:2}],p={toc:u},c="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"generating-your-first-llm-output"},"Generating Your First LLM Output"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Having problems? Don't worry, reach out on ",(0,a.kt)("a",{parentName:"p",href:"https://discord.gg/kewN9Gtjt2"},"discord")," and we will help you out.")),(0,a.kt)("p",null,"First, we need to install ",(0,a.kt)("inlineCode",{parentName:"p"},"tokio")," in our project. Since this is a tutorial we will install the full ",(0,a.kt)("inlineCode",{parentName:"p"},"tokio")," package crate, in production, of course we should be more selective with what features we install."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cargo add tokio --features full\n")),(0,a.kt)("p",null,"First, let's start by writing a simple Rust program that generates an LLM output using LLM-Chain and the OpenAI driver:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'use llm_chain::{executor, parameters, prompt};\n\n// Declare an async main function\n#[tokio::main(flavor = "current_thread")]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Create a new ChatGPT executor\n    let exec = executor!()?;\n    // Create our prompt...\n    let res = prompt!(\n        "You are a robot assistant for making personalized greetings",\n        "Make a personalized greeting for Joe"\n    )\n    .run(&parameters!(), &exec) // ...and run it\n    .await?;\n    println!("{}", res);\n    Ok(())\n}\n')),(0,a.kt)("h2",{id:"understanding-llm-response"},"Understanding LLM Response"),(0,a.kt)("p",null,"When you run the program, you'll receive an LLM response. The response contains the generated text and other metadata."),(0,a.kt)("h2",{id:"error-handling-and-common-issues"},"Error Handling and Common Issues"),(0,a.kt)("p",null,"One common issue you might encounter is forgetting to set the OpenAI API key. Make sure you have set the API key in your ",(0,a.kt)("inlineCode",{parentName:"p"},"OPENAI_API_KEY")," environment variable."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'export OPENAI_API_KEY="YOUR_OPEN_AI_KEY" # TIP: It stars with sk-\n')),(0,a.kt)("p",null,"If you don't want to set enviroment variable or want to multiple api-keys. Then you can use a different macro like this. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'use llm_chain::{executor, options, parameters, prompt};\nuse tokio;\n\n// Declare an async main function\n#[tokio::main(flavor = "current_thread")]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Create a new ChatGPT executor\n    let options = options! {\n        ApiKey: "sk-proj-..."\n    };\n\n    let exec = executor!(chatgpt, options);\n    match exec {\n        Ok(exec) => {\n            \n            let res = prompt!(\n                "You are a robot assistant for making personalized greetings",\n                "Make a personalized greeting for Joe"\n            )\n            .run(&parameters!(), &exec) // ...and run it\n            .await?;\n            println!("{}", res);\n        }\n        Err(err) => panic!("Unable to create executor: {}", err),\n    }\n    // Create our step containing our prompt template\n\n    Ok(())\n}\n\n')),(0,a.kt)("p",null,"In the next tutorial, we'll cover adding parameters to customize the LLM prompt to create more complicated interactions."))}m.isMDXComponent=!0}}]);