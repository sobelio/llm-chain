/* automatically generated by rust-bindgen 0.66.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _ISOC2X_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const _DYNAMIC_STACK_SIZE_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_ISOCXX11: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_DYNAMIC_STACK_SIZE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 37;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 64;
pub const UINT_FAST16_WIDTH: u32 = 64;
pub const INT_FAST32_WIDTH: u32 = 64;
pub const UINT_FAST32_WIDTH: u32 = 64;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 64;
pub const UINTPTR_WIDTH: u32 = 64;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 64;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 64;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub const __bool_true_false_are_defined: u32 = 1;
pub const GGML_FILE_MAGIC: u32 = 1734831468;
pub const GGML_FILE_VERSION: u32 = 1;
pub const GGML_QNT_VERSION: u32 = 2;
pub const GGML_QNT_VERSION_FACTOR: u32 = 1000;
pub const GGML_MAX_DIMS: u32 = 4;
pub const GGML_MAX_NODES: u32 = 4096;
pub const GGML_MAX_PARAMS: u32 = 256;
pub const GGML_MAX_CONTEXTS: u32 = 64;
pub const GGML_MAX_SRC: u32 = 6;
pub const GGML_MAX_NAME: u32 = 48;
pub const GGML_MAX_OP_PARAMS: u32 = 32;
pub const GGML_DEFAULT_N_THREADS: u32 = 4;
pub const GGML_EXIT_SUCCESS: u32 = 0;
pub const GGML_EXIT_ABORTED: u32 = 1;
pub const GGML_GRAPH_HASHTABLE_SIZE: u32 = 8273;
pub const GGML_CUDA_MAX_DEVICES: u32 = 16;
pub const LLAMA_MAX_DEVICES: u32 = 16;
pub const LLAMA_FILE_MAGIC_GGJT: u32 = 1734830708;
pub const LLAMA_FILE_MAGIC_GGLA: u32 = 1734831201;
pub const LLAMA_FILE_MAGIC_GGMF: u32 = 1734831462;
pub const LLAMA_FILE_MAGIC_GGML: u32 = 1734831468;
pub const LLAMA_FILE_MAGIC_GGSN: u32 = 1734833006;
pub const LLAMA_FILE_VERSION: u32 = 3;
pub const LLAMA_FILE_MAGIC: u32 = 1734830708;
pub const LLAMA_FILE_MAGIC_UNVERSIONED: u32 = 1734831468;
pub const LLAMA_SESSION_MAGIC: u32 = 1734833006;
pub const LLAMA_SESSION_VERSION: u32 = 1;
pub const LLAMA_DEFAULT_SEED: u32 = 4294967295;
pub const LLAMA_DEFAULT_RMS_EPS: f64 = 0.000005;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type ggml_fp16_t = u16;
extern "C" {
    pub fn ggml_fp16_to_fp32(x: ggml_fp16_t) -> f32;
}
extern "C" {
    pub fn ggml_fp32_to_fp16(x: f32) -> ggml_fp16_t;
}
extern "C" {
    pub fn ggml_fp16_to_fp32_row(x: *const ggml_fp16_t, y: *mut f32, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ggml_fp32_to_fp16_row(x: *const f32, y: *mut ggml_fp16_t, n: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_context {
    _unused: [u8; 0],
}
pub const ggml_type_GGML_TYPE_F32: ggml_type = 0;
pub const ggml_type_GGML_TYPE_F16: ggml_type = 1;
pub const ggml_type_GGML_TYPE_Q4_0: ggml_type = 2;
pub const ggml_type_GGML_TYPE_Q4_1: ggml_type = 3;
pub const ggml_type_GGML_TYPE_Q5_0: ggml_type = 6;
pub const ggml_type_GGML_TYPE_Q5_1: ggml_type = 7;
pub const ggml_type_GGML_TYPE_Q8_0: ggml_type = 8;
pub const ggml_type_GGML_TYPE_Q8_1: ggml_type = 9;
pub const ggml_type_GGML_TYPE_Q2_K: ggml_type = 10;
pub const ggml_type_GGML_TYPE_Q3_K: ggml_type = 11;
pub const ggml_type_GGML_TYPE_Q4_K: ggml_type = 12;
pub const ggml_type_GGML_TYPE_Q5_K: ggml_type = 13;
pub const ggml_type_GGML_TYPE_Q6_K: ggml_type = 14;
pub const ggml_type_GGML_TYPE_Q8_K: ggml_type = 15;
pub const ggml_type_GGML_TYPE_I8: ggml_type = 16;
pub const ggml_type_GGML_TYPE_I16: ggml_type = 17;
pub const ggml_type_GGML_TYPE_I32: ggml_type = 18;
pub const ggml_type_GGML_TYPE_COUNT: ggml_type = 19;
pub type ggml_type = ::std::os::raw::c_uint;
pub const ggml_backend_GGML_BACKEND_CPU: ggml_backend = 0;
pub const ggml_backend_GGML_BACKEND_GPU: ggml_backend = 10;
pub const ggml_backend_GGML_BACKEND_GPU_SPLIT: ggml_backend = 20;
pub type ggml_backend = ::std::os::raw::c_uint;
pub const ggml_ftype_GGML_FTYPE_UNKNOWN: ggml_ftype = -1;
pub const ggml_ftype_GGML_FTYPE_ALL_F32: ggml_ftype = 0;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_F16: ggml_ftype = 1;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_Q4_0: ggml_ftype = 2;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_Q4_1: ggml_ftype = 3;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_Q4_1_SOME_F16: ggml_ftype = 4;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_Q8_0: ggml_ftype = 7;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_Q5_0: ggml_ftype = 8;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_Q5_1: ggml_ftype = 9;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_Q2_K: ggml_ftype = 10;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_Q3_K: ggml_ftype = 11;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_Q4_K: ggml_ftype = 12;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_Q5_K: ggml_ftype = 13;
pub const ggml_ftype_GGML_FTYPE_MOSTLY_Q6_K: ggml_ftype = 14;
pub type ggml_ftype = ::std::os::raw::c_int;
pub const ggml_op_GGML_OP_NONE: ggml_op = 0;
pub const ggml_op_GGML_OP_DUP: ggml_op = 1;
pub const ggml_op_GGML_OP_ADD: ggml_op = 2;
pub const ggml_op_GGML_OP_ADD1: ggml_op = 3;
pub const ggml_op_GGML_OP_ACC: ggml_op = 4;
pub const ggml_op_GGML_OP_SUB: ggml_op = 5;
pub const ggml_op_GGML_OP_MUL: ggml_op = 6;
pub const ggml_op_GGML_OP_DIV: ggml_op = 7;
pub const ggml_op_GGML_OP_SQR: ggml_op = 8;
pub const ggml_op_GGML_OP_SQRT: ggml_op = 9;
pub const ggml_op_GGML_OP_LOG: ggml_op = 10;
pub const ggml_op_GGML_OP_SUM: ggml_op = 11;
pub const ggml_op_GGML_OP_SUM_ROWS: ggml_op = 12;
pub const ggml_op_GGML_OP_MEAN: ggml_op = 13;
pub const ggml_op_GGML_OP_ARGMAX: ggml_op = 14;
pub const ggml_op_GGML_OP_REPEAT: ggml_op = 15;
pub const ggml_op_GGML_OP_REPEAT_BACK: ggml_op = 16;
pub const ggml_op_GGML_OP_SILU_BACK: ggml_op = 17;
pub const ggml_op_GGML_OP_NORM: ggml_op = 18;
pub const ggml_op_GGML_OP_RMS_NORM: ggml_op = 19;
pub const ggml_op_GGML_OP_RMS_NORM_BACK: ggml_op = 20;
pub const ggml_op_GGML_OP_MUL_MAT: ggml_op = 21;
pub const ggml_op_GGML_OP_OUT_PROD: ggml_op = 22;
pub const ggml_op_GGML_OP_SCALE: ggml_op = 23;
pub const ggml_op_GGML_OP_SET: ggml_op = 24;
pub const ggml_op_GGML_OP_CPY: ggml_op = 25;
pub const ggml_op_GGML_OP_CONT: ggml_op = 26;
pub const ggml_op_GGML_OP_RESHAPE: ggml_op = 27;
pub const ggml_op_GGML_OP_VIEW: ggml_op = 28;
pub const ggml_op_GGML_OP_PERMUTE: ggml_op = 29;
pub const ggml_op_GGML_OP_TRANSPOSE: ggml_op = 30;
pub const ggml_op_GGML_OP_GET_ROWS: ggml_op = 31;
pub const ggml_op_GGML_OP_GET_ROWS_BACK: ggml_op = 32;
pub const ggml_op_GGML_OP_DIAG: ggml_op = 33;
pub const ggml_op_GGML_OP_DIAG_MASK_INF: ggml_op = 34;
pub const ggml_op_GGML_OP_DIAG_MASK_ZERO: ggml_op = 35;
pub const ggml_op_GGML_OP_SOFT_MAX: ggml_op = 36;
pub const ggml_op_GGML_OP_SOFT_MAX_BACK: ggml_op = 37;
pub const ggml_op_GGML_OP_ROPE: ggml_op = 38;
pub const ggml_op_GGML_OP_ROPE_BACK: ggml_op = 39;
pub const ggml_op_GGML_OP_ALIBI: ggml_op = 40;
pub const ggml_op_GGML_OP_CLAMP: ggml_op = 41;
pub const ggml_op_GGML_OP_CONV_1D: ggml_op = 42;
pub const ggml_op_GGML_OP_CONV_2D: ggml_op = 43;
pub const ggml_op_GGML_OP_POOL_1D: ggml_op = 44;
pub const ggml_op_GGML_OP_POOL_2D: ggml_op = 45;
pub const ggml_op_GGML_OP_FLASH_ATTN: ggml_op = 46;
pub const ggml_op_GGML_OP_FLASH_FF: ggml_op = 47;
pub const ggml_op_GGML_OP_FLASH_ATTN_BACK: ggml_op = 48;
pub const ggml_op_GGML_OP_WIN_PART: ggml_op = 49;
pub const ggml_op_GGML_OP_WIN_UNPART: ggml_op = 50;
pub const ggml_op_GGML_OP_UNARY: ggml_op = 51;
pub const ggml_op_GGML_OP_MAP_UNARY: ggml_op = 52;
pub const ggml_op_GGML_OP_MAP_BINARY: ggml_op = 53;
pub const ggml_op_GGML_OP_MAP_CUSTOM1: ggml_op = 54;
pub const ggml_op_GGML_OP_MAP_CUSTOM2: ggml_op = 55;
pub const ggml_op_GGML_OP_MAP_CUSTOM3: ggml_op = 56;
pub const ggml_op_GGML_OP_CROSS_ENTROPY_LOSS: ggml_op = 57;
pub const ggml_op_GGML_OP_CROSS_ENTROPY_LOSS_BACK: ggml_op = 58;
pub const ggml_op_GGML_OP_COUNT: ggml_op = 59;
pub type ggml_op = ::std::os::raw::c_uint;
pub const ggml_unary_op_GGML_UNARY_OP_ABS: ggml_unary_op = 0;
pub const ggml_unary_op_GGML_UNARY_OP_SGN: ggml_unary_op = 1;
pub const ggml_unary_op_GGML_UNARY_OP_NEG: ggml_unary_op = 2;
pub const ggml_unary_op_GGML_UNARY_OP_STEP: ggml_unary_op = 3;
pub const ggml_unary_op_GGML_UNARY_OP_TANH: ggml_unary_op = 4;
pub const ggml_unary_op_GGML_UNARY_OP_ELU: ggml_unary_op = 5;
pub const ggml_unary_op_GGML_UNARY_OP_RELU: ggml_unary_op = 6;
pub const ggml_unary_op_GGML_UNARY_OP_GELU: ggml_unary_op = 7;
pub const ggml_unary_op_GGML_UNARY_OP_GELU_QUICK: ggml_unary_op = 8;
pub const ggml_unary_op_GGML_UNARY_OP_SILU: ggml_unary_op = 9;
pub type ggml_unary_op = ::std::os::raw::c_uint;
pub const ggml_object_type_GGML_OBJECT_TENSOR: ggml_object_type = 0;
pub const ggml_object_type_GGML_OBJECT_GRAPH: ggml_object_type = 1;
pub const ggml_object_type_GGML_OBJECT_WORK_BUFFER: ggml_object_type = 2;
pub type ggml_object_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_object {
    pub offs: usize,
    pub size: usize,
    pub next: *mut ggml_object,
    pub type_: ggml_object_type,
    pub padding: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout_ggml_object() {
    const UNINIT: ::std::mem::MaybeUninit<ggml_object> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ggml_object>(),
        32usize,
        concat!("Size of: ", stringify!(ggml_object))
    );
    assert_eq!(
        ::std::mem::align_of::<ggml_object>(),
        8usize,
        concat!("Alignment of ", stringify!(ggml_object))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_object),
            "::",
            stringify!(offs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_object),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_object),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_object),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_object),
            "::",
            stringify!(padding)
        )
    );
}
pub const GGML_OBJECT_SIZE: usize = 32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_tensor {
    pub type_: ggml_type,
    pub backend: ggml_backend,
    pub n_dims: ::std::os::raw::c_int,
    pub ne: [i64; 4usize],
    pub nb: [usize; 4usize],
    pub op: ggml_op,
    pub op_params: [i32; 8usize],
    pub is_param: bool,
    pub grad: *mut ggml_tensor,
    pub src: [*mut ggml_tensor; 6usize],
    pub perf_runs: ::std::os::raw::c_int,
    pub perf_cycles: i64,
    pub perf_time_us: i64,
    pub data: *mut ::std::os::raw::c_void,
    pub name: [::std::os::raw::c_char; 48usize],
    pub extra: *mut ::std::os::raw::c_void,
    pub padding: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout_ggml_tensor() {
    const UNINIT: ::std::mem::MaybeUninit<ggml_tensor> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ggml_tensor>(),
        272usize,
        concat!("Size of: ", stringify!(ggml_tensor))
    );
    assert_eq!(
        ::std::mem::align_of::<ggml_tensor>(),
        8usize,
        concat!("Alignment of ", stringify!(ggml_tensor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tensor),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backend) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tensor),
            "::",
            stringify!(backend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_dims) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tensor),
            "::",
            stringify!(n_dims)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ne) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tensor),
            "::",
            stringify!(ne)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nb) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tensor),
            "::",
            stringify!(nb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tensor),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_params) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tensor),
            "::",
            stringify!(op_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_param) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tensor),
            "::",
            stringify!(is_param)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grad) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tensor),
            "::",
            stringify!(grad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tensor),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).perf_runs) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tensor),
            "::",
            stringify!(perf_runs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).perf_cycles) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tensor),
            "::",
            stringify!(perf_cycles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).perf_time_us) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tensor),
            "::",
            stringify!(perf_time_us)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tensor),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tensor),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extra) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tensor),
            "::",
            stringify!(extra)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tensor),
            "::",
            stringify!(padding)
        )
    );
}
pub const GGML_TENSOR_SIZE: usize = 272;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_cplan {
    pub work_size: usize,
    pub work_data: *mut u8,
    pub n_threads: ::std::os::raw::c_int,
    pub n_tasks: [::std::os::raw::c_int; 4096usize],
    pub abort_callback:
        ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void) -> bool>,
    pub abort_callback_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ggml_cplan() {
    const UNINIT: ::std::mem::MaybeUninit<ggml_cplan> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ggml_cplan>(),
        16424usize,
        concat!("Size of: ", stringify!(ggml_cplan))
    );
    assert_eq!(
        ::std::mem::align_of::<ggml_cplan>(),
        8usize,
        concat!("Alignment of ", stringify!(ggml_cplan))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).work_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_cplan),
            "::",
            stringify!(work_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).work_data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_cplan),
            "::",
            stringify!(work_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_threads) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_cplan),
            "::",
            stringify!(n_threads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_tasks) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_cplan),
            "::",
            stringify!(n_tasks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).abort_callback) as usize - ptr as usize },
        16408usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_cplan),
            "::",
            stringify!(abort_callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).abort_callback_data) as usize - ptr as usize },
        16416usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_cplan),
            "::",
            stringify!(abort_callback_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_cgraph {
    pub n_nodes: ::std::os::raw::c_int,
    pub n_leafs: ::std::os::raw::c_int,
    pub nodes: [*mut ggml_tensor; 4096usize],
    pub grads: [*mut ggml_tensor; 4096usize],
    pub leafs: [*mut ggml_tensor; 4096usize],
    pub visited_hash_table: [*mut ::std::os::raw::c_void; 8273usize],
    pub perf_runs: ::std::os::raw::c_int,
    pub perf_cycles: i64,
    pub perf_time_us: i64,
}
#[test]
fn bindgen_test_layout_ggml_cgraph() {
    const UNINIT: ::std::mem::MaybeUninit<ggml_cgraph> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ggml_cgraph>(),
        164520usize,
        concat!("Size of: ", stringify!(ggml_cgraph))
    );
    assert_eq!(
        ::std::mem::align_of::<ggml_cgraph>(),
        8usize,
        concat!("Alignment of ", stringify!(ggml_cgraph))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_nodes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_cgraph),
            "::",
            stringify!(n_nodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_leafs) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_cgraph),
            "::",
            stringify!(n_leafs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_cgraph),
            "::",
            stringify!(nodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grads) as usize - ptr as usize },
        32776usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_cgraph),
            "::",
            stringify!(grads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).leafs) as usize - ptr as usize },
        65544usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_cgraph),
            "::",
            stringify!(leafs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).visited_hash_table) as usize - ptr as usize },
        98312usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_cgraph),
            "::",
            stringify!(visited_hash_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).perf_runs) as usize - ptr as usize },
        164496usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_cgraph),
            "::",
            stringify!(perf_runs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).perf_cycles) as usize - ptr as usize },
        164504usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_cgraph),
            "::",
            stringify!(perf_cycles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).perf_time_us) as usize - ptr as usize },
        164512usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_cgraph),
            "::",
            stringify!(perf_time_us)
        )
    );
}
pub const GGML_GRAPH_SIZE: usize = 164520;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_scratch {
    pub offs: usize,
    pub size: usize,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ggml_scratch() {
    const UNINIT: ::std::mem::MaybeUninit<ggml_scratch> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ggml_scratch>(),
        24usize,
        concat!("Size of: ", stringify!(ggml_scratch))
    );
    assert_eq!(
        ::std::mem::align_of::<ggml_scratch>(),
        8usize,
        concat!("Alignment of ", stringify!(ggml_scratch))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_scratch),
            "::",
            stringify!(offs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_scratch),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_scratch),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_init_params {
    pub mem_size: usize,
    pub mem_buffer: *mut ::std::os::raw::c_void,
    pub no_alloc: bool,
}
#[test]
fn bindgen_test_layout_ggml_init_params() {
    const UNINIT: ::std::mem::MaybeUninit<ggml_init_params> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ggml_init_params>(),
        24usize,
        concat!("Size of: ", stringify!(ggml_init_params))
    );
    assert_eq!(
        ::std::mem::align_of::<ggml_init_params>(),
        8usize,
        concat!("Alignment of ", stringify!(ggml_init_params))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_init_params),
            "::",
            stringify!(mem_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem_buffer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_init_params),
            "::",
            stringify!(mem_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no_alloc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_init_params),
            "::",
            stringify!(no_alloc)
        )
    );
}
pub const ggml_task_type_GGML_TASK_INIT: ggml_task_type = 0;
pub const ggml_task_type_GGML_TASK_COMPUTE: ggml_task_type = 1;
pub const ggml_task_type_GGML_TASK_FINALIZE: ggml_task_type = 2;
pub type ggml_task_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_compute_params {
    pub type_: ggml_task_type,
    pub ith: ::std::os::raw::c_int,
    pub nth: ::std::os::raw::c_int,
    pub wsize: usize,
    pub wdata: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ggml_compute_params() {
    const UNINIT: ::std::mem::MaybeUninit<ggml_compute_params> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ggml_compute_params>(),
        32usize,
        concat!("Size of: ", stringify!(ggml_compute_params))
    );
    assert_eq!(
        ::std::mem::align_of::<ggml_compute_params>(),
        8usize,
        concat!("Alignment of ", stringify!(ggml_compute_params))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_compute_params),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ith) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_compute_params),
            "::",
            stringify!(ith)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nth) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_compute_params),
            "::",
            stringify!(nth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wsize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_compute_params),
            "::",
            stringify!(wsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wdata) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_compute_params),
            "::",
            stringify!(wdata)
        )
    );
}
extern "C" {
    pub fn ggml_time_init();
}
extern "C" {
    pub fn ggml_time_ms() -> i64;
}
extern "C" {
    pub fn ggml_time_us() -> i64;
}
extern "C" {
    pub fn ggml_cycles() -> i64;
}
extern "C" {
    pub fn ggml_cycles_per_ms() -> i64;
}
extern "C" {
    pub fn ggml_numa_init();
}
extern "C" {
    pub fn ggml_is_numa() -> bool;
}
extern "C" {
    pub fn ggml_print_object(obj: *const ggml_object);
}
extern "C" {
    pub fn ggml_print_objects(ctx: *const ggml_context);
}
extern "C" {
    pub fn ggml_nelements(tensor: *const ggml_tensor) -> i64;
}
extern "C" {
    pub fn ggml_nrows(tensor: *const ggml_tensor) -> i64;
}
extern "C" {
    pub fn ggml_nbytes(tensor: *const ggml_tensor) -> usize;
}
extern "C" {
    pub fn ggml_nbytes_split(
        tensor: *const ggml_tensor,
        nrows_split: ::std::os::raw::c_int,
    ) -> usize;
}
extern "C" {
    pub fn ggml_blck_size(type_: ggml_type) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_type_size(type_: ggml_type) -> usize;
}
extern "C" {
    pub fn ggml_type_sizef(type_: ggml_type) -> f32;
}
extern "C" {
    pub fn ggml_type_name(type_: ggml_type) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ggml_op_name(op: ggml_op) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ggml_op_symbol(op: ggml_op) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ggml_element_size(tensor: *const ggml_tensor) -> usize;
}
extern "C" {
    pub fn ggml_is_quantized(type_: ggml_type) -> bool;
}
extern "C" {
    pub fn ggml_ftype_to_ggml_type(ftype: ggml_ftype) -> ggml_type;
}
extern "C" {
    pub fn ggml_is_transposed(tensor: *const ggml_tensor) -> bool;
}
extern "C" {
    pub fn ggml_is_contiguous(tensor: *const ggml_tensor) -> bool;
}
extern "C" {
    pub fn ggml_is_permuted(tensor: *const ggml_tensor) -> bool;
}
extern "C" {
    pub fn ggml_tensor_overhead() -> usize;
}
extern "C" {
    pub fn ggml_init(params: ggml_init_params) -> *mut ggml_context;
}
extern "C" {
    pub fn ggml_free(ctx: *mut ggml_context);
}
extern "C" {
    pub fn ggml_used_mem(ctx: *const ggml_context) -> usize;
}
extern "C" {
    pub fn ggml_set_scratch(ctx: *mut ggml_context, scratch: ggml_scratch) -> usize;
}
extern "C" {
    pub fn ggml_get_no_alloc(ctx: *mut ggml_context) -> bool;
}
extern "C" {
    pub fn ggml_set_no_alloc(ctx: *mut ggml_context, no_alloc: bool);
}
extern "C" {
    pub fn ggml_get_mem_buffer(ctx: *const ggml_context) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ggml_get_mem_size(ctx: *const ggml_context) -> usize;
}
extern "C" {
    pub fn ggml_get_max_tensor_size(ctx: *const ggml_context) -> usize;
}
extern "C" {
    pub fn ggml_new_tensor(
        ctx: *mut ggml_context,
        type_: ggml_type,
        n_dims: ::std::os::raw::c_int,
        ne: *const i64,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_new_tensor_1d(
        ctx: *mut ggml_context,
        type_: ggml_type,
        ne0: i64,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_new_tensor_2d(
        ctx: *mut ggml_context,
        type_: ggml_type,
        ne0: i64,
        ne1: i64,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_new_tensor_3d(
        ctx: *mut ggml_context,
        type_: ggml_type,
        ne0: i64,
        ne1: i64,
        ne2: i64,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_new_tensor_4d(
        ctx: *mut ggml_context,
        type_: ggml_type,
        ne0: i64,
        ne1: i64,
        ne2: i64,
        ne3: i64,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_new_i32(ctx: *mut ggml_context, value: i32) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_new_f32(ctx: *mut ggml_context, value: f32) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_dup_tensor(ctx: *mut ggml_context, src: *const ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_view_tensor(ctx: *mut ggml_context, src: *const ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_get_tensor(
        ctx: *mut ggml_context,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_set_zero(tensor: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_set_i32(tensor: *mut ggml_tensor, value: i32) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_set_f32(tensor: *mut ggml_tensor, value: f32) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_get_i32_1d(tensor: *const ggml_tensor, i: ::std::os::raw::c_int) -> i32;
}
extern "C" {
    pub fn ggml_set_i32_1d(tensor: *const ggml_tensor, i: ::std::os::raw::c_int, value: i32);
}
extern "C" {
    pub fn ggml_get_f32_1d(tensor: *const ggml_tensor, i: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ggml_set_f32_1d(tensor: *const ggml_tensor, i: ::std::os::raw::c_int, value: f32);
}
extern "C" {
    pub fn ggml_get_data(tensor: *const ggml_tensor) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ggml_get_data_f32(tensor: *const ggml_tensor) -> *mut f32;
}
extern "C" {
    pub fn ggml_get_unary_op(tensor: *const ggml_tensor) -> ggml_unary_op;
}
extern "C" {
    pub fn ggml_get_name(tensor: *const ggml_tensor) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ggml_set_name(
        tensor: *mut ggml_tensor,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_format_name(
        tensor: *mut ggml_tensor,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_dup(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_dup_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_add(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_add_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_add1(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_add1_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_acc(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        nb1: usize,
        nb2: usize,
        nb3: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_acc_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        nb1: usize,
        nb2: usize,
        nb3: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_sub(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_sub_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_mul(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_mul_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_div(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_div_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_sqr(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_sqr_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_sqrt(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_sqrt_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_log(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_log_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_sum(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_sum_rows(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_mean(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_argmax(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_repeat(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_repeat_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_abs(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_abs_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_sgn(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_sgn_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_neg(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_neg_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_step(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_step_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_tanh(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_tanh_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_elu(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_elu_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_relu(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_relu_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_gelu(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_gelu_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_gelu_quick(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_gelu_quick_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor)
        -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_silu(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_silu_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_silu_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_norm(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_norm_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_rms_norm(ctx: *mut ggml_context, a: *mut ggml_tensor, eps: f32)
        -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_rms_norm_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        eps: f32,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_rms_norm_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_mul_mat(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_out_prod(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_scale(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_scale_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_set(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        nb1: usize,
        nb2: usize,
        nb3: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_set_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        nb1: usize,
        nb2: usize,
        nb3: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_set_1d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        offset: usize,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_set_1d_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        offset: usize,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_set_2d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        nb1: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_set_2d_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        nb1: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_cpy(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_cpy_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_cont(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_cont_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_reshape(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_reshape_1d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_reshape_2d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_reshape_3d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
        ne2: i64,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_reshape_4d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
        ne2: i64,
        ne3: i64,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_view_1d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        offset: usize,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_view_2d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
        nb1: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_view_3d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
        ne2: i64,
        nb1: usize,
        nb2: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_view_4d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
        ne2: i64,
        ne3: i64,
        nb1: usize,
        nb2: usize,
        nb3: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_permute(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        axis0: ::std::os::raw::c_int,
        axis1: ::std::os::raw::c_int,
        axis2: ::std::os::raw::c_int,
        axis3: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_transpose(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_get_rows(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_get_rows_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_diag(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_diag_mask_inf(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        n_past: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_diag_mask_inf_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        n_past: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_diag_mask_zero(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        n_past: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_diag_mask_zero_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        n_past: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_soft_max(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_soft_max_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_soft_max_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_soft_max_back_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_rope(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        n_past: ::std::os::raw::c_int,
        n_dims: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        n_ctx: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_rope_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        n_past: ::std::os::raw::c_int,
        n_dims: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        n_ctx: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_rope_custom(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        n_past: ::std::os::raw::c_int,
        n_dims: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        n_ctx: ::std::os::raw::c_int,
        freq_base: f32,
        freq_scale: f32,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_rope_custom_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        n_past: ::std::os::raw::c_int,
        n_dims: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        n_ctx: ::std::os::raw::c_int,
        freq_base: f32,
        freq_scale: f32,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_rope_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        n_past: ::std::os::raw::c_int,
        n_dims: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        n_ctx: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_alibi(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        n_past: ::std::os::raw::c_int,
        n_head: ::std::os::raw::c_int,
        bias_max: f32,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_clamp(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        min: f32,
        max: f32,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_conv_1d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        s0: ::std::os::raw::c_int,
        p0: ::std::os::raw::c_int,
        d0: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_conv_2d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        s0: ::std::os::raw::c_int,
        s1: ::std::os::raw::c_int,
        p0: ::std::os::raw::c_int,
        p1: ::std::os::raw::c_int,
        d0: ::std::os::raw::c_int,
        d1: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_conv_1d_ph(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        s: ::std::os::raw::c_int,
        d: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
pub const ggml_op_pool_GGML_OP_POOL_MAX: ggml_op_pool = 0;
pub const ggml_op_pool_GGML_OP_POOL_AVG: ggml_op_pool = 1;
pub const ggml_op_pool_GGML_OP_POOL_COUNT: ggml_op_pool = 2;
pub type ggml_op_pool = ::std::os::raw::c_uint;
extern "C" {
    pub fn ggml_pool_1d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        op: ggml_op_pool,
        k0: ::std::os::raw::c_int,
        s0: ::std::os::raw::c_int,
        p0: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_pool_2d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        op: ggml_op_pool,
        k0: ::std::os::raw::c_int,
        k1: ::std::os::raw::c_int,
        s0: ::std::os::raw::c_int,
        s1: ::std::os::raw::c_int,
        p0: ::std::os::raw::c_int,
        p1: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_flash_attn(
        ctx: *mut ggml_context,
        q: *mut ggml_tensor,
        k: *mut ggml_tensor,
        v: *mut ggml_tensor,
        masked: bool,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_flash_attn_back(
        ctx: *mut ggml_context,
        q: *mut ggml_tensor,
        k: *mut ggml_tensor,
        v: *mut ggml_tensor,
        d: *mut ggml_tensor,
        masked: bool,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_flash_ff(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b0: *mut ggml_tensor,
        b1: *mut ggml_tensor,
        c0: *mut ggml_tensor,
        c1: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_win_part(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        w: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_win_unpart(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        w0: ::std::os::raw::c_int,
        h0: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
pub type ggml_unary_op_f32_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: *mut f32, arg3: *const f32),
>;
pub type ggml_binary_op_f32_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: *mut f32,
        arg3: *const f32,
        arg4: *const f32,
    ),
>;
pub type ggml_custom1_op_f32_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ggml_tensor, arg2: *const ggml_tensor)>;
pub type ggml_custom2_op_f32_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ggml_tensor,
        arg2: *const ggml_tensor,
        arg3: *const ggml_tensor,
    ),
>;
pub type ggml_custom3_op_f32_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ggml_tensor,
        arg2: *const ggml_tensor,
        arg3: *const ggml_tensor,
        arg4: *const ggml_tensor,
    ),
>;
extern "C" {
    pub fn ggml_unary(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        op: ggml_unary_op,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_unary_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        op: ggml_unary_op,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_map_unary_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        fun: ggml_unary_op_f32_t,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_map_unary_inplace_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        fun: ggml_unary_op_f32_t,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_map_binary_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        fun: ggml_binary_op_f32_t,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_map_binary_inplace_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        fun: ggml_binary_op_f32_t,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_map_custom1_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        fun: ggml_custom1_op_f32_t,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_map_custom1_inplace_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        fun: ggml_custom1_op_f32_t,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_map_custom2_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        fun: ggml_custom2_op_f32_t,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_map_custom2_inplace_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        fun: ggml_custom2_op_f32_t,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_map_custom3_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
        fun: ggml_custom3_op_f32_t,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_map_custom3_inplace_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
        fun: ggml_custom3_op_f32_t,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_cross_entropy_loss(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_cross_entropy_loss_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_set_param(ctx: *mut ggml_context, tensor: *mut ggml_tensor);
}
extern "C" {
    pub fn ggml_build_forward_expand(cgraph: *mut ggml_cgraph, tensor: *mut ggml_tensor);
}
extern "C" {
    pub fn ggml_build_forward(tensor: *mut ggml_tensor) -> ggml_cgraph;
}
extern "C" {
    pub fn ggml_build_backward(
        ctx: *mut ggml_context,
        gf: *mut ggml_cgraph,
        keep: bool,
    ) -> ggml_cgraph;
}
extern "C" {
    pub fn ggml_new_graph(ctx: *mut ggml_context) -> *mut ggml_cgraph;
}
extern "C" {
    pub fn ggml_build_forward_ctx(
        ctx: *mut ggml_context,
        tensor: *mut ggml_tensor,
    ) -> *mut ggml_cgraph;
}
extern "C" {
    pub fn ggml_graph_overhead() -> usize;
}
extern "C" {
    pub fn ggml_graph_plan(
        cgraph: *mut ggml_cgraph,
        n_threads: ::std::os::raw::c_int,
    ) -> ggml_cplan;
}
extern "C" {
    pub fn ggml_graph_compute(
        cgraph: *mut ggml_cgraph,
        cplan: *mut ggml_cplan,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_graph_reset(cgraph: *mut ggml_cgraph);
}
extern "C" {
    pub fn ggml_graph_compute_with_ctx(
        ctx: *mut ggml_context,
        cgraph: *mut ggml_cgraph,
        n_threads: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ggml_graph_get_tensor(
        cgraph: *mut ggml_cgraph,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn ggml_graph_export(cgraph: *const ggml_cgraph, fname: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn ggml_graph_import(
        fname: *const ::std::os::raw::c_char,
        ctx_data: *mut *mut ggml_context,
        ctx_eval: *mut *mut ggml_context,
    ) -> ggml_cgraph;
}
extern "C" {
    pub fn ggml_graph_print(cgraph: *const ggml_cgraph);
}
extern "C" {
    pub fn ggml_graph_dump_dot(
        gb: *const ggml_cgraph,
        gf: *const ggml_cgraph,
        filename: *const ::std::os::raw::c_char,
    );
}
pub const ggml_opt_type_GGML_OPT_ADAM: ggml_opt_type = 0;
pub const ggml_opt_type_GGML_OPT_LBFGS: ggml_opt_type = 1;
pub type ggml_opt_type = ::std::os::raw::c_uint;
pub const ggml_linesearch_GGML_LINESEARCH_DEFAULT: ggml_linesearch = 1;
pub const ggml_linesearch_GGML_LINESEARCH_BACKTRACKING_ARMIJO: ggml_linesearch = 0;
pub const ggml_linesearch_GGML_LINESEARCH_BACKTRACKING_WOLFE: ggml_linesearch = 1;
pub const ggml_linesearch_GGML_LINESEARCH_BACKTRACKING_STRONG_WOLFE: ggml_linesearch = 2;
pub type ggml_linesearch = ::std::os::raw::c_uint;
pub const ggml_opt_result_GGML_OPT_OK: ggml_opt_result = 0;
pub const ggml_opt_result_GGML_OPT_DID_NOT_CONVERGE: ggml_opt_result = 1;
pub const ggml_opt_result_GGML_OPT_NO_CONTEXT: ggml_opt_result = 2;
pub const ggml_opt_result_GGML_OPT_INVALID_WOLFE: ggml_opt_result = 3;
pub const ggml_opt_result_GGML_OPT_FAIL: ggml_opt_result = 4;
pub const ggml_opt_result_GGML_LINESEARCH_FAIL: ggml_opt_result = -128;
pub const ggml_opt_result_GGML_LINESEARCH_MINIMUM_STEP: ggml_opt_result = -127;
pub const ggml_opt_result_GGML_LINESEARCH_MAXIMUM_STEP: ggml_opt_result = -126;
pub const ggml_opt_result_GGML_LINESEARCH_MAXIMUM_ITERATIONS: ggml_opt_result = -125;
pub const ggml_opt_result_GGML_LINESEARCH_INVALID_PARAMETERS: ggml_opt_result = -124;
pub type ggml_opt_result = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_opt_params {
    pub type_: ggml_opt_type,
    pub n_threads: ::std::os::raw::c_int,
    pub past: ::std::os::raw::c_int,
    pub delta: f32,
    pub max_no_improvement: ::std::os::raw::c_int,
    pub print_forward_graph: bool,
    pub print_backward_graph: bool,
    pub adam: ggml_opt_params__bindgen_ty_1,
    pub lbfgs: ggml_opt_params__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_opt_params__bindgen_ty_1 {
    pub n_iter: ::std::os::raw::c_int,
    pub sched: f32,
    pub decay: f32,
    pub alpha: f32,
    pub beta1: f32,
    pub beta2: f32,
    pub eps: f32,
    pub eps_f: f32,
    pub eps_g: f32,
}
#[test]
fn bindgen_test_layout_ggml_opt_params__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ggml_opt_params__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ggml_opt_params__bindgen_ty_1>(),
        36usize,
        concat!("Size of: ", stringify!(ggml_opt_params__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ggml_opt_params__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(ggml_opt_params__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_iter) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_1),
            "::",
            stringify!(n_iter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sched) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_1),
            "::",
            stringify!(sched)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decay) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_1),
            "::",
            stringify!(decay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alpha) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_1),
            "::",
            stringify!(alpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).beta1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_1),
            "::",
            stringify!(beta1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).beta2) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_1),
            "::",
            stringify!(beta2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eps) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_1),
            "::",
            stringify!(eps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eps_f) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_1),
            "::",
            stringify!(eps_f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eps_g) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_1),
            "::",
            stringify!(eps_g)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_opt_params__bindgen_ty_2 {
    pub m: ::std::os::raw::c_int,
    pub n_iter: ::std::os::raw::c_int,
    pub max_linesearch: ::std::os::raw::c_int,
    pub eps: f32,
    pub ftol: f32,
    pub wolfe: f32,
    pub min_step: f32,
    pub max_step: f32,
    pub linesearch: ggml_linesearch,
}
#[test]
fn bindgen_test_layout_ggml_opt_params__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<ggml_opt_params__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ggml_opt_params__bindgen_ty_2>(),
        36usize,
        concat!("Size of: ", stringify!(ggml_opt_params__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<ggml_opt_params__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(ggml_opt_params__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_2),
            "::",
            stringify!(m)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_iter) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_2),
            "::",
            stringify!(n_iter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_linesearch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_2),
            "::",
            stringify!(max_linesearch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eps) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_2),
            "::",
            stringify!(eps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ftol) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_2),
            "::",
            stringify!(ftol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wolfe) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_2),
            "::",
            stringify!(wolfe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_step) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_2),
            "::",
            stringify!(min_step)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_step) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_2),
            "::",
            stringify!(max_step)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linesearch) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_2),
            "::",
            stringify!(linesearch)
        )
    );
}
#[test]
fn bindgen_test_layout_ggml_opt_params() {
    const UNINIT: ::std::mem::MaybeUninit<ggml_opt_params> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ggml_opt_params>(),
        96usize,
        concat!("Size of: ", stringify!(ggml_opt_params))
    );
    assert_eq!(
        ::std::mem::align_of::<ggml_opt_params>(),
        4usize,
        concat!("Alignment of ", stringify!(ggml_opt_params))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_threads) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params),
            "::",
            stringify!(n_threads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).past) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params),
            "::",
            stringify!(past)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delta) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params),
            "::",
            stringify!(delta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_no_improvement) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params),
            "::",
            stringify!(max_no_improvement)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).print_forward_graph) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params),
            "::",
            stringify!(print_forward_graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).print_backward_graph) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params),
            "::",
            stringify!(print_backward_graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adam) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params),
            "::",
            stringify!(adam)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lbfgs) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params),
            "::",
            stringify!(lbfgs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_opt_context {
    pub ctx: *mut ggml_context,
    pub params: ggml_opt_params,
    pub iter: ::std::os::raw::c_int,
    pub nx: i64,
    pub just_initialized: bool,
    pub adam: ggml_opt_context__bindgen_ty_1,
    pub lbfgs: ggml_opt_context__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_opt_context__bindgen_ty_1 {
    pub x: *mut ggml_tensor,
    pub g1: *mut ggml_tensor,
    pub g2: *mut ggml_tensor,
    pub m: *mut ggml_tensor,
    pub v: *mut ggml_tensor,
    pub mh: *mut ggml_tensor,
    pub vh: *mut ggml_tensor,
    pub pf: *mut ggml_tensor,
    pub fx_best: f32,
    pub fx_prev: f32,
    pub n_no_improvement: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ggml_opt_context__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ggml_opt_context__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ggml_opt_context__bindgen_ty_1>(),
        80usize,
        concat!("Size of: ", stringify!(ggml_opt_context__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ggml_opt_context__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ggml_opt_context__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_1),
            "::",
            stringify!(g1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_1),
            "::",
            stringify!(g2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_1),
            "::",
            stringify!(m)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_1),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mh) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_1),
            "::",
            stringify!(mh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vh) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_1),
            "::",
            stringify!(vh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pf) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_1),
            "::",
            stringify!(pf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fx_best) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_1),
            "::",
            stringify!(fx_best)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fx_prev) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_1),
            "::",
            stringify!(fx_prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_no_improvement) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_1),
            "::",
            stringify!(n_no_improvement)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_opt_context__bindgen_ty_2 {
    pub x: *mut ggml_tensor,
    pub xp: *mut ggml_tensor,
    pub g: *mut ggml_tensor,
    pub gp: *mut ggml_tensor,
    pub d: *mut ggml_tensor,
    pub pf: *mut ggml_tensor,
    pub lmal: *mut ggml_tensor,
    pub lmys: *mut ggml_tensor,
    pub lms: *mut ggml_tensor,
    pub lmy: *mut ggml_tensor,
    pub fx_best: f32,
    pub step: f32,
    pub j: ::std::os::raw::c_int,
    pub k: ::std::os::raw::c_int,
    pub end: ::std::os::raw::c_int,
    pub n_no_improvement: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ggml_opt_context__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<ggml_opt_context__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ggml_opt_context__bindgen_ty_2>(),
        104usize,
        concat!("Size of: ", stringify!(ggml_opt_context__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<ggml_opt_context__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(ggml_opt_context__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_2),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_2),
            "::",
            stringify!(xp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_2),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_2),
            "::",
            stringify!(gp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_2),
            "::",
            stringify!(d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pf) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_2),
            "::",
            stringify!(pf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lmal) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_2),
            "::",
            stringify!(lmal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lmys) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_2),
            "::",
            stringify!(lmys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lms) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_2),
            "::",
            stringify!(lms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lmy) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_2),
            "::",
            stringify!(lmy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fx_best) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_2),
            "::",
            stringify!(fx_best)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).step) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_2),
            "::",
            stringify!(step)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).j) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_2),
            "::",
            stringify!(j)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).k) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_2),
            "::",
            stringify!(k)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_2),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_no_improvement) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_2),
            "::",
            stringify!(n_no_improvement)
        )
    );
}
#[test]
fn bindgen_test_layout_ggml_opt_context() {
    const UNINIT: ::std::mem::MaybeUninit<ggml_opt_context> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ggml_opt_context>(),
        312usize,
        concat!("Size of: ", stringify!(ggml_opt_context))
    );
    assert_eq!(
        ::std::mem::align_of::<ggml_opt_context>(),
        8usize,
        concat!("Alignment of ", stringify!(ggml_opt_context))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).params) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context),
            "::",
            stringify!(params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iter) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context),
            "::",
            stringify!(iter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nx) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context),
            "::",
            stringify!(nx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).just_initialized) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context),
            "::",
            stringify!(just_initialized)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adam) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context),
            "::",
            stringify!(adam)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lbfgs) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context),
            "::",
            stringify!(lbfgs)
        )
    );
}
extern "C" {
    pub fn ggml_opt_default_params(type_: ggml_opt_type) -> ggml_opt_params;
}
extern "C" {
    pub fn ggml_opt(
        ctx: *mut ggml_context,
        params: ggml_opt_params,
        f: *mut ggml_tensor,
    ) -> ggml_opt_result;
}
extern "C" {
    pub fn ggml_opt_init(
        ctx: *mut ggml_context,
        opt: *mut ggml_opt_context,
        params: ggml_opt_params,
        nx: i64,
    );
}
extern "C" {
    pub fn ggml_opt_resume(
        ctx: *mut ggml_context,
        opt: *mut ggml_opt_context,
        f: *mut ggml_tensor,
    ) -> ggml_opt_result;
}
extern "C" {
    pub fn ggml_opt_resume_g(
        ctx: *mut ggml_context,
        opt: *mut ggml_opt_context,
        f: *mut ggml_tensor,
        gf: *mut ggml_cgraph,
        gb: *mut ggml_cgraph,
    ) -> ggml_opt_result;
}
extern "C" {
    pub fn ggml_quantize_q4_0(
        src: *const f32,
        dst: *mut ::std::os::raw::c_void,
        n: ::std::os::raw::c_int,
        k: ::std::os::raw::c_int,
        hist: *mut i64,
    ) -> usize;
}
extern "C" {
    pub fn ggml_quantize_q4_1(
        src: *const f32,
        dst: *mut ::std::os::raw::c_void,
        n: ::std::os::raw::c_int,
        k: ::std::os::raw::c_int,
        hist: *mut i64,
    ) -> usize;
}
extern "C" {
    pub fn ggml_quantize_q5_0(
        src: *const f32,
        dst: *mut ::std::os::raw::c_void,
        n: ::std::os::raw::c_int,
        k: ::std::os::raw::c_int,
        hist: *mut i64,
    ) -> usize;
}
extern "C" {
    pub fn ggml_quantize_q5_1(
        src: *const f32,
        dst: *mut ::std::os::raw::c_void,
        n: ::std::os::raw::c_int,
        k: ::std::os::raw::c_int,
        hist: *mut i64,
    ) -> usize;
}
extern "C" {
    pub fn ggml_quantize_q8_0(
        src: *const f32,
        dst: *mut ::std::os::raw::c_void,
        n: ::std::os::raw::c_int,
        k: ::std::os::raw::c_int,
        hist: *mut i64,
    ) -> usize;
}
extern "C" {
    pub fn ggml_quantize_chunk(
        type_: ggml_type,
        src: *const f32,
        dst: *mut ::std::os::raw::c_void,
        start: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
        hist: *mut i64,
    ) -> usize;
}
extern "C" {
    pub fn ggml_cpu_has_avx() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_avx2() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_avx512() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_avx512_vbmi() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_avx512_vnni() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_fma() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_neon() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_arm_fma() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_f16c() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_fp16_va() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_wasm_simd() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_blas() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_cublas() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_clblast() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_gpublas() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_sse3() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ggml_cpu_has_vsx() -> ::std::os::raw::c_int;
}
pub type ggml_to_float_t = ::std::option::Option<
    unsafe extern "C" fn(x: *const ::std::os::raw::c_void, y: *mut f32, k: ::std::os::raw::c_int),
>;
pub type ggml_from_float_t = ::std::option::Option<
    unsafe extern "C" fn(x: *const f32, y: *mut ::std::os::raw::c_void, k: ::std::os::raw::c_int),
>;
pub type ggml_vec_dot_t = ::std::option::Option<
    unsafe extern "C" fn(
        n: ::std::os::raw::c_int,
        s: *mut f32,
        x: *const ::std::os::raw::c_void,
        y: *const ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_type_traits_t {
    pub to_float: ggml_to_float_t,
    pub from_float: ggml_from_float_t,
    pub from_float_reference: ggml_from_float_t,
    pub vec_dot: ggml_vec_dot_t,
    pub vec_dot_type: ggml_type,
}
#[test]
fn bindgen_test_layout_ggml_type_traits_t() {
    const UNINIT: ::std::mem::MaybeUninit<ggml_type_traits_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ggml_type_traits_t>(),
        40usize,
        concat!("Size of: ", stringify!(ggml_type_traits_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ggml_type_traits_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ggml_type_traits_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).to_float) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_type_traits_t),
            "::",
            stringify!(to_float)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).from_float) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_type_traits_t),
            "::",
            stringify!(from_float)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).from_float_reference) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_type_traits_t),
            "::",
            stringify!(from_float_reference)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vec_dot) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_type_traits_t),
            "::",
            stringify!(vec_dot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vec_dot_type) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_type_traits_t),
            "::",
            stringify!(vec_dot_type)
        )
    );
}
extern "C" {
    pub fn ggml_internal_get_type_traits(i: ggml_type) -> ggml_type_traits_t;
}
extern "C" {
    pub fn ggml_init_cublas();
}
extern "C" {
    pub fn ggml_cuda_set_tensor_split(tensor_split: *const f32);
}
extern "C" {
    pub fn ggml_cuda_mul(src0: *const ggml_tensor, src1: *const ggml_tensor, dst: *mut ggml_tensor);
}
extern "C" {
    pub fn ggml_cuda_can_mul_mat(
        src0: *const ggml_tensor,
        src1: *const ggml_tensor,
        dst: *mut ggml_tensor,
    ) -> bool;
}
extern "C" {
    pub fn ggml_cuda_mul_mat_get_wsize(
        src0: *const ggml_tensor,
        src1: *const ggml_tensor,
        dst: *mut ggml_tensor,
    ) -> usize;
}
extern "C" {
    pub fn ggml_cuda_mul_mat(
        src0: *const ggml_tensor,
        src1: *const ggml_tensor,
        dst: *mut ggml_tensor,
        wdata: *mut ::std::os::raw::c_void,
        wsize: usize,
    );
}
extern "C" {
    pub fn ggml_cuda_host_malloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ggml_cuda_host_free(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn ggml_cuda_transform_tensor(data: *mut ::std::os::raw::c_void, tensor: *mut ggml_tensor);
}
extern "C" {
    pub fn ggml_cuda_free_data(tensor: *mut ggml_tensor);
}
extern "C" {
    pub fn ggml_cuda_assign_buffers(tensor: *mut ggml_tensor);
}
extern "C" {
    pub fn ggml_cuda_assign_buffers_no_scratch(tensor: *mut ggml_tensor);
}
extern "C" {
    pub fn ggml_cuda_assign_buffers_force_inplace(tensor: *mut ggml_tensor);
}
extern "C" {
    pub fn ggml_cuda_set_main_device(main_device: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ggml_cuda_set_mul_mat_q(mul_mat_q: bool);
}
extern "C" {
    pub fn ggml_cuda_set_scratch_size(scratch_size: usize);
}
extern "C" {
    pub fn ggml_cuda_free_scratch();
}
extern "C" {
    pub fn ggml_cuda_compute_forward(
        params: *mut ggml_compute_params,
        tensor: *mut ggml_tensor,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_model {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_context {
    _unused: [u8; 0],
}
pub type llama_token = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_token_data {
    pub id: llama_token,
    pub logit: f32,
    pub p: f32,
}
#[test]
fn bindgen_test_layout_llama_token_data() {
    const UNINIT: ::std::mem::MaybeUninit<llama_token_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<llama_token_data>(),
        12usize,
        concat!("Size of: ", stringify!(llama_token_data))
    );
    assert_eq!(
        ::std::mem::align_of::<llama_token_data>(),
        4usize,
        concat!("Alignment of ", stringify!(llama_token_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_token_data),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logit) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_token_data),
            "::",
            stringify!(logit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_token_data),
            "::",
            stringify!(p)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_token_data_array {
    pub data: *mut llama_token_data,
    pub size: usize,
    pub sorted: bool,
}
#[test]
fn bindgen_test_layout_llama_token_data_array() {
    const UNINIT: ::std::mem::MaybeUninit<llama_token_data_array> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<llama_token_data_array>(),
        24usize,
        concat!("Size of: ", stringify!(llama_token_data_array))
    );
    assert_eq!(
        ::std::mem::align_of::<llama_token_data_array>(),
        8usize,
        concat!("Alignment of ", stringify!(llama_token_data_array))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_token_data_array),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_token_data_array),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sorted) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_token_data_array),
            "::",
            stringify!(sorted)
        )
    );
}
pub type llama_progress_callback =
    ::std::option::Option<unsafe extern "C" fn(progress: f32, ctx: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_context_params {
    pub seed: u32,
    pub n_ctx: i32,
    pub n_batch: i32,
    pub n_gqa: i32,
    pub rms_norm_eps: f32,
    pub n_gpu_layers: i32,
    pub main_gpu: i32,
    pub tensor_split: *const f32,
    pub rope_freq_base: f32,
    pub rope_freq_scale: f32,
    pub progress_callback: llama_progress_callback,
    pub progress_callback_user_data: *mut ::std::os::raw::c_void,
    pub low_vram: bool,
    pub mul_mat_q: bool,
    pub f16_kv: bool,
    pub logits_all: bool,
    pub vocab_only: bool,
    pub use_mmap: bool,
    pub use_mlock: bool,
    pub embedding: bool,
}
#[test]
fn bindgen_test_layout_llama_context_params() {
    const UNINIT: ::std::mem::MaybeUninit<llama_context_params> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<llama_context_params>(),
        72usize,
        concat!("Size of: ", stringify!(llama_context_params))
    );
    assert_eq!(
        ::std::mem::align_of::<llama_context_params>(),
        8usize,
        concat!("Alignment of ", stringify!(llama_context_params))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seed) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(seed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_ctx) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(n_ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_batch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(n_batch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_gqa) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(n_gqa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rms_norm_eps) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(rms_norm_eps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_gpu_layers) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(n_gpu_layers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).main_gpu) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(main_gpu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tensor_split) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(tensor_split)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rope_freq_base) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(rope_freq_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rope_freq_scale) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(rope_freq_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).progress_callback) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(progress_callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).progress_callback_user_data) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(progress_callback_user_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).low_vram) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(low_vram)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mul_mat_q) as usize - ptr as usize },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(mul_mat_q)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f16_kv) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(f16_kv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logits_all) as usize - ptr as usize },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(logits_all)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vocab_only) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(vocab_only)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_mmap) as usize - ptr as usize },
        69usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(use_mmap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_mlock) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(use_mlock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).embedding) as usize - ptr as usize },
        71usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(embedding)
        )
    );
}
pub const llama_ftype_LLAMA_FTYPE_ALL_F32: llama_ftype = 0;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_F16: llama_ftype = 1;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_Q4_0: llama_ftype = 2;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_Q4_1: llama_ftype = 3;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_Q4_1_SOME_F16: llama_ftype = 4;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_Q8_0: llama_ftype = 7;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_Q5_0: llama_ftype = 8;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_Q5_1: llama_ftype = 9;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_Q2_K: llama_ftype = 10;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_Q3_K_S: llama_ftype = 11;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_Q3_K_M: llama_ftype = 12;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_Q3_K_L: llama_ftype = 13;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_Q4_K_S: llama_ftype = 14;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_Q4_K_M: llama_ftype = 15;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_Q5_K_S: llama_ftype = 16;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_Q5_K_M: llama_ftype = 17;
pub const llama_ftype_LLAMA_FTYPE_MOSTLY_Q6_K: llama_ftype = 18;
pub type llama_ftype = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_model_quantize_params {
    pub nthread: ::std::os::raw::c_int,
    pub ftype: llama_ftype,
    pub allow_requantize: bool,
    pub quantize_output_tensor: bool,
}
#[test]
fn bindgen_test_layout_llama_model_quantize_params() {
    const UNINIT: ::std::mem::MaybeUninit<llama_model_quantize_params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<llama_model_quantize_params>(),
        12usize,
        concat!("Size of: ", stringify!(llama_model_quantize_params))
    );
    assert_eq!(
        ::std::mem::align_of::<llama_model_quantize_params>(),
        4usize,
        concat!("Alignment of ", stringify!(llama_model_quantize_params))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nthread) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_model_quantize_params),
            "::",
            stringify!(nthread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ftype) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_model_quantize_params),
            "::",
            stringify!(ftype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allow_requantize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_model_quantize_params),
            "::",
            stringify!(allow_requantize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quantize_output_tensor) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_model_quantize_params),
            "::",
            stringify!(quantize_output_tensor)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_grammar {
    _unused: [u8; 0],
}
pub const llama_gretype_LLAMA_GRETYPE_END: llama_gretype = 0;
pub const llama_gretype_LLAMA_GRETYPE_ALT: llama_gretype = 1;
pub const llama_gretype_LLAMA_GRETYPE_RULE_REF: llama_gretype = 2;
pub const llama_gretype_LLAMA_GRETYPE_CHAR: llama_gretype = 3;
pub const llama_gretype_LLAMA_GRETYPE_CHAR_NOT: llama_gretype = 4;
pub const llama_gretype_LLAMA_GRETYPE_CHAR_RNG_UPPER: llama_gretype = 5;
pub const llama_gretype_LLAMA_GRETYPE_CHAR_ALT: llama_gretype = 6;
pub type llama_gretype = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_grammar_element {
    pub type_: llama_gretype,
    pub value: u32,
}
#[test]
fn bindgen_test_layout_llama_grammar_element() {
    const UNINIT: ::std::mem::MaybeUninit<llama_grammar_element> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<llama_grammar_element>(),
        8usize,
        concat!("Size of: ", stringify!(llama_grammar_element))
    );
    assert_eq!(
        ::std::mem::align_of::<llama_grammar_element>(),
        4usize,
        concat!("Alignment of ", stringify!(llama_grammar_element))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_grammar_element),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_grammar_element),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_timings {
    pub t_start_ms: f64,
    pub t_end_ms: f64,
    pub t_load_ms: f64,
    pub t_sample_ms: f64,
    pub t_p_eval_ms: f64,
    pub t_eval_ms: f64,
    pub n_sample: i32,
    pub n_p_eval: i32,
    pub n_eval: i32,
}
#[test]
fn bindgen_test_layout_llama_timings() {
    const UNINIT: ::std::mem::MaybeUninit<llama_timings> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<llama_timings>(),
        64usize,
        concat!("Size of: ", stringify!(llama_timings))
    );
    assert_eq!(
        ::std::mem::align_of::<llama_timings>(),
        8usize,
        concat!("Alignment of ", stringify!(llama_timings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_start_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_timings),
            "::",
            stringify!(t_start_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_end_ms) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_timings),
            "::",
            stringify!(t_end_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_load_ms) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_timings),
            "::",
            stringify!(t_load_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_sample_ms) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_timings),
            "::",
            stringify!(t_sample_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_p_eval_ms) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_timings),
            "::",
            stringify!(t_p_eval_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_eval_ms) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_timings),
            "::",
            stringify!(t_eval_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_sample) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_timings),
            "::",
            stringify!(n_sample)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_p_eval) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_timings),
            "::",
            stringify!(n_p_eval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_eval) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_timings),
            "::",
            stringify!(n_eval)
        )
    );
}
extern "C" {
    pub fn llama_max_devices() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llama_context_default_params() -> llama_context_params;
}
extern "C" {
    pub fn llama_model_quantize_default_params() -> llama_model_quantize_params;
}
extern "C" {
    pub fn llama_mmap_supported() -> bool;
}
extern "C" {
    pub fn llama_mlock_supported() -> bool;
}
extern "C" {
    pub fn llama_backend_init(numa: bool);
}
extern "C" {
    pub fn llama_backend_free();
}
extern "C" {
    pub fn llama_time_us() -> i64;
}
extern "C" {
    pub fn llama_load_model_from_file(
        path_model: *const ::std::os::raw::c_char,
        params: llama_context_params,
    ) -> *mut llama_model;
}
extern "C" {
    pub fn llama_free_model(model: *mut llama_model);
}
extern "C" {
    pub fn llama_new_context_with_model(
        model: *mut llama_model,
        params: llama_context_params,
    ) -> *mut llama_context;
}
extern "C" {
    pub fn llama_init_from_file(
        path_model: *const ::std::os::raw::c_char,
        params: llama_context_params,
    ) -> *mut llama_context;
}
extern "C" {
    pub fn llama_free(ctx: *mut llama_context);
}
extern "C" {
    pub fn llama_model_quantize(
        fname_inp: *const ::std::os::raw::c_char,
        fname_out: *const ::std::os::raw::c_char,
        params: *const llama_model_quantize_params,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llama_apply_lora_from_file(
        ctx: *mut llama_context,
        path_lora: *const ::std::os::raw::c_char,
        path_base_model: *const ::std::os::raw::c_char,
        n_threads: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llama_model_apply_lora_from_file(
        model: *const llama_model,
        path_lora: *const ::std::os::raw::c_char,
        path_base_model: *const ::std::os::raw::c_char,
        n_threads: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llama_get_kv_cache_token_count(ctx: *const llama_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llama_set_rng_seed(ctx: *mut llama_context, seed: u32);
}
extern "C" {
    pub fn llama_get_state_size(ctx: *const llama_context) -> usize;
}
extern "C" {
    pub fn llama_copy_state_data(ctx: *mut llama_context, dst: *mut u8) -> usize;
}
extern "C" {
    pub fn llama_set_state_data(ctx: *mut llama_context, src: *mut u8) -> usize;
}
extern "C" {
    pub fn llama_load_session_file(
        ctx: *mut llama_context,
        path_session: *const ::std::os::raw::c_char,
        tokens_out: *mut llama_token,
        n_token_capacity: usize,
        n_token_count_out: *mut usize,
    ) -> bool;
}
extern "C" {
    pub fn llama_save_session_file(
        ctx: *mut llama_context,
        path_session: *const ::std::os::raw::c_char,
        tokens: *const llama_token,
        n_token_count: usize,
    ) -> bool;
}
extern "C" {
    pub fn llama_eval(
        ctx: *mut llama_context,
        tokens: *const llama_token,
        n_tokens: ::std::os::raw::c_int,
        n_past: ::std::os::raw::c_int,
        n_threads: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llama_eval_embd(
        ctx: *mut llama_context,
        embd: *const f32,
        n_tokens: ::std::os::raw::c_int,
        n_past: ::std::os::raw::c_int,
        n_threads: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llama_eval_export(
        ctx: *mut llama_context,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llama_tokenize(
        ctx: *mut llama_context,
        text: *const ::std::os::raw::c_char,
        tokens: *mut llama_token,
        n_max_tokens: ::std::os::raw::c_int,
        add_bos: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llama_tokenize_with_model(
        model: *const llama_model,
        text: *const ::std::os::raw::c_char,
        tokens: *mut llama_token,
        n_max_tokens: ::std::os::raw::c_int,
        add_bos: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llama_n_vocab(ctx: *const llama_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llama_n_ctx(ctx: *const llama_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llama_n_embd(ctx: *const llama_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llama_n_vocab_from_model(model: *const llama_model) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llama_n_ctx_from_model(model: *const llama_model) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llama_n_embd_from_model(model: *const llama_model) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llama_get_vocab(
        ctx: *const llama_context,
        strings: *mut *const ::std::os::raw::c_char,
        scores: *mut f32,
        capacity: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llama_get_vocab_from_model(
        model: *const llama_model,
        strings: *mut *const ::std::os::raw::c_char,
        scores: *mut f32,
        capacity: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llama_get_logits(ctx: *mut llama_context) -> *mut f32;
}
extern "C" {
    pub fn llama_get_embeddings(ctx: *mut llama_context) -> *mut f32;
}
extern "C" {
    pub fn llama_token_to_str(
        ctx: *const llama_context,
        token: llama_token,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn llama_token_to_str_with_model(
        model: *const llama_model,
        token: llama_token,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn llama_token_bos() -> llama_token;
}
extern "C" {
    pub fn llama_token_eos() -> llama_token;
}
extern "C" {
    pub fn llama_token_nl() -> llama_token;
}
extern "C" {
    pub fn llama_grammar_init(
        rules: *mut *const llama_grammar_element,
        n_rules: usize,
        start_rule_index: usize,
    ) -> *mut llama_grammar;
}
extern "C" {
    pub fn llama_grammar_free(grammar: *mut llama_grammar);
}
extern "C" {
    #[doc = " @details Repetition penalty described in CTRL academic paper https://arxiv.org/abs/1909.05858, with negative logit fix."]
    pub fn llama_sample_repetition_penalty(
        ctx: *mut llama_context,
        candidates: *mut llama_token_data_array,
        last_tokens: *const llama_token,
        last_tokens_size: usize,
        penalty: f32,
    );
}
extern "C" {
    #[doc = " @details Frequency and presence penalties described in OpenAI API https://platform.openai.com/docs/api-reference/parameter-details."]
    pub fn llama_sample_frequency_and_presence_penalties(
        ctx: *mut llama_context,
        candidates: *mut llama_token_data_array,
        last_tokens: *const llama_token,
        last_tokens_size: usize,
        alpha_frequency: f32,
        alpha_presence: f32,
    );
}
extern "C" {
    #[doc = " @details Apply classifier-free guidance to the logits as described in academic paper \"Stay on topic with Classifier-Free Guidance\" https://arxiv.org/abs/2306.17806\n @param candidates A vector of `llama_token_data` containing the candidate tokens, the logits must be directly extracted from the original generation context without being sorted.\n @params guidance_ctx A separate context from the same model. Other than a negative prompt at the beginning, it should have all generated and user input tokens copied from the main context.\n @params scale Guidance strength. 1.0f means no guidance. Higher values mean stronger guidance."]
    pub fn llama_sample_classifier_free_guidance(
        ctx: *mut llama_context,
        candidates: *mut llama_token_data_array,
        guidance_ctx: *mut llama_context,
        scale: f32,
    );
}
extern "C" {
    #[doc = " @details Sorts candidate tokens by their logits in descending order and calculate probabilities based on logits."]
    pub fn llama_sample_softmax(ctx: *mut llama_context, candidates: *mut llama_token_data_array);
}
extern "C" {
    #[doc = " @details Top-K sampling described in academic paper \"The Curious Case of Neural Text Degeneration\" https://arxiv.org/abs/1904.09751"]
    pub fn llama_sample_top_k(
        ctx: *mut llama_context,
        candidates: *mut llama_token_data_array,
        k: ::std::os::raw::c_int,
        min_keep: usize,
    );
}
extern "C" {
    #[doc = " @details Nucleus sampling described in academic paper \"The Curious Case of Neural Text Degeneration\" https://arxiv.org/abs/1904.09751"]
    pub fn llama_sample_top_p(
        ctx: *mut llama_context,
        candidates: *mut llama_token_data_array,
        p: f32,
        min_keep: usize,
    );
}
extern "C" {
    #[doc = " @details Tail Free Sampling described in https://www.trentonbricken.com/Tail-Free-Sampling/."]
    pub fn llama_sample_tail_free(
        ctx: *mut llama_context,
        candidates: *mut llama_token_data_array,
        z: f32,
        min_keep: usize,
    );
}
extern "C" {
    #[doc = " @details Locally Typical Sampling implementation described in the paper https://arxiv.org/abs/2202.00666."]
    pub fn llama_sample_typical(
        ctx: *mut llama_context,
        candidates: *mut llama_token_data_array,
        p: f32,
        min_keep: usize,
    );
}
extern "C" {
    pub fn llama_sample_temperature(
        ctx: *mut llama_context,
        candidates: *mut llama_token_data_array,
        temp: f32,
    );
}
extern "C" {
    #[doc = " @details Apply constraints from grammar"]
    pub fn llama_sample_grammar(
        ctx: *mut llama_context,
        candidates: *mut llama_token_data_array,
        grammar: *const llama_grammar,
    );
}
extern "C" {
    #[doc = " @details Mirostat 1.0 algorithm described in the paper https://arxiv.org/abs/2007.14966. Uses tokens instead of words.\n @param candidates A vector of `llama_token_data` containing the candidate tokens, their probabilities (p), and log-odds (logit) for the current position in the generated text.\n @param tau  The target cross-entropy (or surprise) value you want to achieve for the generated text. A higher value corresponds to more surprising or less predictable text, while a lower value corresponds to less surprising or more predictable text.\n @param eta The learning rate used to update `mu` based on the error between the target and observed surprisal of the sampled word. A larger learning rate will cause `mu` to be updated more quickly, while a smaller learning rate will result in slower updates.\n @param m The number of tokens considered in the estimation of `s_hat`. This is an arbitrary value that is used to calculate `s_hat`, which in turn helps to calculate the value of `k`. In the paper, they use `m = 100`, but you can experiment with different values to see how it affects the performance of the algorithm.\n @param mu Maximum cross-entropy. This value is initialized to be twice the target cross-entropy (`2 * tau`) and is updated in the algorithm based on the error between the target and observed surprisal."]
    pub fn llama_sample_token_mirostat(
        ctx: *mut llama_context,
        candidates: *mut llama_token_data_array,
        tau: f32,
        eta: f32,
        m: ::std::os::raw::c_int,
        mu: *mut f32,
    ) -> llama_token;
}
extern "C" {
    #[doc = " @details Mirostat 2.0 algorithm described in the paper https://arxiv.org/abs/2007.14966. Uses tokens instead of words.\n @param candidates A vector of `llama_token_data` containing the candidate tokens, their probabilities (p), and log-odds (logit) for the current position in the generated text.\n @param tau  The target cross-entropy (or surprise) value you want to achieve for the generated text. A higher value corresponds to more surprising or less predictable text, while a lower value corresponds to less surprising or more predictable text.\n @param eta The learning rate used to update `mu` based on the error between the target and observed surprisal of the sampled word. A larger learning rate will cause `mu` to be updated more quickly, while a smaller learning rate will result in slower updates.\n @param mu Maximum cross-entropy. This value is initialized to be twice the target cross-entropy (`2 * tau`) and is updated in the algorithm based on the error between the target and observed surprisal."]
    pub fn llama_sample_token_mirostat_v2(
        ctx: *mut llama_context,
        candidates: *mut llama_token_data_array,
        tau: f32,
        eta: f32,
        mu: *mut f32,
    ) -> llama_token;
}
extern "C" {
    #[doc = " @details Selects the token with the highest probability."]
    pub fn llama_sample_token_greedy(
        ctx: *mut llama_context,
        candidates: *mut llama_token_data_array,
    ) -> llama_token;
}
extern "C" {
    #[doc = " @details Randomly selects a token from the candidates based on their probabilities."]
    pub fn llama_sample_token(
        ctx: *mut llama_context,
        candidates: *mut llama_token_data_array,
    ) -> llama_token;
}
extern "C" {
    #[doc = " @details Accepts the sampled token into the grammar"]
    pub fn llama_grammar_accept_token(
        ctx: *mut llama_context,
        grammar: *mut llama_grammar,
        token: llama_token,
    );
}
extern "C" {
    pub fn llama_get_timings(ctx: *mut llama_context) -> llama_timings;
}
extern "C" {
    pub fn llama_print_timings(ctx: *mut llama_context);
}
extern "C" {
    pub fn llama_reset_timings(ctx: *mut llama_context);
}
extern "C" {
    pub fn llama_print_system_info() -> *const ::std::os::raw::c_char;
}
